// <auto-generated />
using System;
using FoodService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FoodService.Data.Migrations
{
    [DbContext(typeof(FoodDbContext))]
    [Migration("20250716042049_FixAllergenNullables")]
    partial class FixAllergenNullables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FoodService.Entities.Allergen", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("NameEn")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name_en");

                    b.Property<string>("NameVi")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name_vi");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("allergens");
                });

            modelBuilder.Entity("FoodService.Entities.Food", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("AlternativeServingSizes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("alternative_serving_sizes");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("barcode");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("DataSource")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("data_source");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("external_id");

                    b.Property<string>("FoodCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("food_code");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("is_verified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name_en");

                    b.Property<string>("NameVi")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name_vi");

                    b.Property<string>("ServingSizeDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("serving_size_description");

                    b.Property<string>("ServingSizeDescriptionEn")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("serving_size_description_en");

                    b.Property<decimal?>("ServingSizeGrams")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("serving_size_grams");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("source_url");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("VerificationStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("verification_status");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("verified_at");

                    b.Property<Guid?>("VerifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("verified_by");

                    b.HasKey("Id");

                    b.HasIndex("Barcode")
                        .IsUnique();

                    b.HasIndex("CategoryId");

                    b.HasIndex("DataSource");

                    b.HasIndex("VerificationStatus");

                    b.ToTable("foods");
                });

            modelBuilder.Entity("FoodService.Entities.FoodAllergen", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("AllergenId")
                        .HasColumnType("uuid")
                        .HasColumnName("allergen_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("FoodId")
                        .HasColumnType("uuid")
                        .HasColumnName("food_id");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("severity");

                    b.HasKey("Id");

                    b.HasIndex("AllergenId");

                    b.HasIndex("FoodId");

                    b.HasIndex("FoodId", "AllergenId")
                        .IsUnique();

                    b.ToTable("food_allergens");
                });

            modelBuilder.Entity("FoodService.Entities.FoodCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name_en");

                    b.Property<string>("NameVi")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name_vi");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer")
                        .HasColumnName("sort_order");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("ParentId");

                    b.ToTable("food_categories");
                });

            modelBuilder.Entity("FoodService.Entities.FoodIngredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("FoodId")
                        .HasColumnType("uuid")
                        .HasColumnName("food_id");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uuid")
                        .HasColumnName("ingredient_id");

                    b.Property<bool>("IsMainIngredient")
                        .HasColumnType("boolean")
                        .HasColumnName("is_main_ingredient");

                    b.Property<int?>("OrderIndex")
                        .HasColumnType("integer")
                        .HasColumnName("order_index");

                    b.Property<decimal?>("Percentage")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("percentage");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("IngredientId");

                    b.HasIndex("FoodId", "OrderIndex");

                    b.ToTable("food_ingredients");
                });

            modelBuilder.Entity("FoodService.Entities.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("NameEn")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name_en");

                    b.Property<string>("NameVi")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name_vi");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("ingredients");
                });

            modelBuilder.Entity("FoodService.Entities.NutritionFacts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<decimal?>("BiotinMcg")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("biotin_mcg");

                    b.Property<decimal?>("CalciumMg")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("calcium_mg");

                    b.Property<decimal?>("CaloriesKcal")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("calories_kcal");

                    b.Property<decimal?>("CarbohydrateG")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("carbohydrate_g");

                    b.Property<decimal?>("CholesterolMg")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("cholesterol_mg");

                    b.Property<decimal?>("CholineMg")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("choline_mg");

                    b.Property<decimal?>("ConfidenceScore")
                        .HasColumnType("decimal(3,2)")
                        .HasColumnName("confidence_score");

                    b.Property<decimal?>("CopperMg")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("copper_mg");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("DataSource")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("data_source");

                    b.Property<decimal?>("FatG")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("fat_g");

                    b.Property<decimal?>("FiberG")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("fiber_g");

                    b.Property<decimal?>("FolateMcg")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("folate_mcg");

                    b.Property<Guid>("FoodId")
                        .HasColumnType("uuid")
                        .HasColumnName("food_id");

                    b.Property<decimal?>("IronMg")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("iron_mg");

                    b.Property<decimal?>("MagnesiumMg")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("magnesium_mg");

                    b.Property<decimal?>("ManganeseMg")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("manganese_mg");

                    b.Property<decimal?>("MonounsaturatedFatG")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("monounsaturated_fat_g");

                    b.Property<decimal?>("NiacinMg")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("niacin_mg");

                    b.Property<decimal?>("PantothenicAcidMg")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("pantothenic_acid_mg");

                    b.Property<decimal?>("PhosphorusMg")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("phosphorus_mg");

                    b.Property<decimal?>("PolyunsaturatedFatG")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("polyunsaturated_fat_g");

                    b.Property<decimal?>("PotassiumMg")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("potassium_mg");

                    b.Property<decimal?>("ProteinG")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("protein_g");

                    b.Property<decimal?>("RiboflavinMg")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("riboflavin_mg");

                    b.Property<decimal?>("SaturatedFatG")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("saturated_fat_g");

                    b.Property<decimal?>("SeleniumMcg")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("selenium_mcg");

                    b.Property<decimal?>("ServingSizeG")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("serving_size_g");

                    b.Property<decimal?>("SodiumMg")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("sodium_mg");

                    b.Property<decimal?>("SugarG")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("sugar_g");

                    b.Property<decimal?>("ThiamineMg")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("thiamine_mg");

                    b.Property<decimal?>("TransFatG")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("trans_fat_g");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal?>("VitaminAMcg")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("vitamin_a_mcg");

                    b.Property<decimal?>("VitaminB12Mcg")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("vitamin_b12_mcg");

                    b.Property<decimal?>("VitaminB6Mg")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("vitamin_b6_mg");

                    b.Property<decimal?>("VitaminCMg")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("vitamin_c_mg");

                    b.Property<decimal?>("VitaminDMcg")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("vitamin_d_mcg");

                    b.Property<decimal?>("VitaminEMg")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("vitamin_e_mg");

                    b.Property<decimal?>("VitaminKMcg")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("vitamin_k_mcg");

                    b.Property<decimal?>("ZincMg")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("zinc_mg");

                    b.HasKey("Id");

                    b.HasIndex("FoodId")
                        .IsUnique();

                    b.ToTable("nutrition_facts");
                });

            modelBuilder.Entity("FoodService.Entities.RecipeFood", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("FoodId")
                        .HasColumnType("uuid")
                        .HasColumnName("food_id");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("integer")
                        .HasColumnName("order_index");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("quantity");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uuid")
                        .HasColumnName("recipe_id");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("unit");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("RecipeId");

                    b.HasIndex("RecipeId", "OrderIndex");

                    b.ToTable("recipe_foods");
                });

            modelBuilder.Entity("FoodService.Entities.Food", b =>
                {
                    b.HasOne("FoodService.Entities.FoodCategory", "Category")
                        .WithMany("Foods")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("FoodService.Entities.FoodAllergen", b =>
                {
                    b.HasOne("FoodService.Entities.Allergen", "Allergen")
                        .WithMany("FoodAllergens")
                        .HasForeignKey("AllergenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodService.Entities.Food", "Food")
                        .WithMany("FoodAllergens")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Allergen");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("FoodService.Entities.FoodCategory", b =>
                {
                    b.HasOne("FoodService.Entities.FoodCategory", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("FoodService.Entities.FoodIngredient", b =>
                {
                    b.HasOne("FoodService.Entities.Food", "Food")
                        .WithMany("FoodIngredients")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodService.Entities.Ingredient", "Ingredient")
                        .WithMany("FoodIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("FoodService.Entities.NutritionFacts", b =>
                {
                    b.HasOne("FoodService.Entities.Food", "Food")
                        .WithOne("NutritionFacts")
                        .HasForeignKey("FoodService.Entities.NutritionFacts", "FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");
                });

            modelBuilder.Entity("FoodService.Entities.RecipeFood", b =>
                {
                    b.HasOne("FoodService.Entities.Food", "Food")
                        .WithMany("RecipeFoods")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");
                });

            modelBuilder.Entity("FoodService.Entities.Allergen", b =>
                {
                    b.Navigation("FoodAllergens");
                });

            modelBuilder.Entity("FoodService.Entities.Food", b =>
                {
                    b.Navigation("FoodAllergens");

                    b.Navigation("FoodIngredients");

                    b.Navigation("NutritionFacts")
                        .IsRequired();

                    b.Navigation("RecipeFoods");
                });

            modelBuilder.Entity("FoodService.Entities.FoodCategory", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Foods");
                });

            modelBuilder.Entity("FoodService.Entities.Ingredient", b =>
                {
                    b.Navigation("FoodIngredients");
                });
#pragma warning restore 612, 618
        }
    }
}
